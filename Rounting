If using different links will refresh the page and lose data. 
Changing the different pages by routing is good way to avoid reload the page.
It not restart the application, keep update and fast than reload the page every time.
In main html page:
routerLink="/somename"
[routerLink]="[/somename]"  property binding is used before
must be full path with / , or the sub-rounter cannot find the path
in the main ts file:
const appRoutes:Routes=[
{path:'somename',component:UserComponent
}];
imports:[
RouteModule.forRoot(appRoutes)
]
How to mark the different Router header:
under the routerLink, add routerLinkActive="active";
in the home page add extra [routerLinkActiveOptions]="{exact:true}"// this 
tell angular when the pull path exactly same as this, then active
How to navigate to another page in one page 
in html:
<button class="btn btn-primary" (click)="onLoadServers()">
in ts file:
import{Route} from '@angular/router';
in the constructor:
constructor(private router:Router){}
then create new function:
onLoadServers(){
this.router.navigate(['/servers']);
}
another method is going to relative path:
onReload()
{this.router.navigate(['/servers'],{relativeTo:this.route});
}
Passing parameter to router:
in main ts:
in the Routes part:
{path:'users/:id/:name,component:UserComponent}
with  the :, the rest after the column will be treated as dynimic parameter
Fetching router parameter in user ts file:
constructor(private route : ActivatedRoute){}
ngOnInit(){
 this.user={
 id:this.route.snapshot.params['id'],
 name:this.route.snapshot.params['name']
 }
}
in user html:
<p>{{user.name}}and {{user.id}}</p>
How to update the information when the paremeter change:
using asychonize by block this fuction until user change the value :
this.route.params.subscribe();
for example:
this.route.params.subscribe(
  (params:Params)=>{
    this.user.id=params['id'];
    this.user.name=params['name'];
  }
);
this need destroy:
import {subscription} from 'rxjs/Subscription'://rxjs is extra library that use by angular
then export class UserComponent implements OnInit,OnDestroy{
}
then in the ngOnInit(){
this.paramsSubscription=this.route.params
.subscribe(
(params:Params)=>{
this.user.id=params['id'];
this.user.name=params['name'];
}
);}
ngOnDestroy(){
this.paramsSubscription.unsubscribe();
}

