property is only accessable inside same component
If parent want to access child component element, decerator need to be added
@Input()
Also import{ Component, OnInit,Input} from '@angular/core';

Assigning an alias to custom properties
@Input('srvElement') element:{type:string,name:string,content:string};
<div class="col-xs-12">
     <app-server-element *ngFor="let serverElement of serverElements"
     [srvElement]="serverElement">
    </app-server-element>
    </div>
@Input : binding an property into element outside the same component    
Element will no longer work after alias the new name to element


Custom event binding:

In app.component.html:
 <app-cockpit (serverCreated)="onServerAdded($event)"
  (blueprintCreated)="onBlueprintAdded($event)"></app-cockpit>
In app.component.ts:
onServerAdded(serverData:{serverName:string,serverContent: string}) {
    this.serverElements.push({
    type: 'server',
    name: serverData.serverName,
    content: serverData.serverContent
    });
  }

  onBlueprintAdded(blueprintData:{serverName: string,serverContent:string}) {
    this.serverElements.push({
    type: 'blueprint',
    name: blueprintData.serverName,
    content: blueprintData.serverContent
    });
  }

in cockpit.component.ts:
import { Component, OnInit ,EventEmitter,Output } from '@angular/core';
@Output() serverCreated= new EventEmitter<{serverName:string,serverContent: string}>();
@Output() blueprintCreated= new EventEmitter<{serverName:string,serverContent: string}>();
EventEmitter is the object(with Generic type<>) in Angular framework that allow 
user create events
@Output is passing event out of component, make serverCreate listenedable from outside.Passing
our component out to main app

onAddServer() {
      this.serverCreated.emit({
        servername:this.newServerName,
        serverContent:this.newServerContent
     
        });
  }

  onAddBlueprint() {
   this.blueprintCreated.emit({
        servername:this.newServerName,
        serverContent:this.newServerContent
     
        });
  }


As a summary:
component communications is key feature of angular.
@Input : make the property bindedable from outside, from parent component from this component
@Output: allow parent component using child component to listen to your own event which create in 
child component
